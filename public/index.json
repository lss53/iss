[{"categories":["hobby"],"content":" git入门简明指南，无高深内容。","date":"2024-03-01","objectID":"/hello-git/","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/"},{"categories":["hobby"],"content":"git入门简明指南，无高深内容。 ","date":"2024-03-01","objectID":"/hello-git/:0:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#"},{"categories":["hobby"],"content":"\r1 安装 下载 git OSX 版 下载 git Windows 版 下载 git Linux 版 ","date":"2024-03-01","objectID":"/hello-git/:1:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#安装"},{"categories":["hobby"],"content":"\r2 创建新仓库创建新文件夹，打开，然后执行： git init 创建新的 git 仓库。 ","date":"2024-03-01","objectID":"/hello-git/:2:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#创建新仓库"},{"categories":["hobby"],"content":"\r3 检出仓库执行如下命令以创建一个本地仓库的克隆版本： git clone /path/to/repository 如果是远端服务器上的仓库，你的命令会是这个样子： git clone username@host:/path/to/repository ","date":"2024-03-01","objectID":"/hello-git/:3:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#检出仓库"},{"categories":["hobby"],"content":"\r4 工作流你的本地仓库由 git 维护的三棵“树”组成。第一个是你的工作目录，它持有实际文件；第二个是暂存区（Index），它像个缓存区域，临时保存你的改动；最后是HEAD，它指向你最后一次提交的结果。 基本配置下的预览\r","date":"2024-03-01","objectID":"/hello-git/:4:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#工作流"},{"categories":["hobby"],"content":"\r5 添加和提交你可以提出更改（把它们添加到暂存区），使用如下命令： git add \u003cfilename\u003e git add * 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动： git commit -m \"代码提交信息\" 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。 ","date":"2024-03-01","objectID":"/hello-git/:5:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#添加和提交"},{"categories":["hobby"],"content":"\r6 推送改动你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库： git push origin main 可以把 main 换成你想要推送的任何分支。 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加： git remote add origin \u003cserver\u003e 如此你就能够将你的改动推送到所添加的服务器上去了。 ","date":"2024-03-01","objectID":"/hello-git/:6:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#推送改动"},{"categories":["hobby"],"content":"\r7 分支分支是用来将特性开发绝缘开来的。在你创建仓库的时候，main 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。 创建一个叫做“feature_x”的分支，并切换过去： git checkout -b feature_x 切换回主分支： git checkout main 再把新建的分支删掉： git branch -d feature_x 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的： git push origin \u003cbranch\u003e ","date":"2024-03-01","objectID":"/hello-git/:7:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#分支"},{"categories":["hobby"],"content":"\r8 更新与合并要更新你的本地仓库至最新改动，执行： git pull 以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。 要合并其他分支到你的当前分支（例如 main），执行： git merge \u003cbranch\u003e 在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功： git add \u003cfilename\u003e 在合并改动之前，你可以使用如下命令预览差异： git diff \u003csource_branch\u003e \u003ctarget_branch\u003e ","date":"2024-03-01","objectID":"/hello-git/:8:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#更新与合并"},{"categories":["hobby"],"content":"\r9 标签为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签： git tag 1.0.0 1b2e1d63ff 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID： git log 你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。 ","date":"2024-03-01","objectID":"/hello-git/:9:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#标签"},{"categories":["hobby"],"content":"\r10 替换本地改动假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动： git checkout -- \u003cfilename\u003e 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。 假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它： git fetch origin git reset --hard origin/master ","date":"2024-03-01","objectID":"/hello-git/:10:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#替换本地改动"},{"categories":["hobby"],"content":"\r11 实用小贴士内建的图形化 git： gitk 彩色的 git 输出： git config color.ui true 显示历史记录时，每个提交的信息只显示一行： git config format.pretty oneline 交互式添加文件到暂存区： git add -i ","date":"2024-03-01","objectID":"/hello-git/:11:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#实用小贴士"},{"categories":["hobby"],"content":"\r12 链接与资源","date":"2024-03-01","objectID":"/hello-git/:12:0","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#链接与资源"},{"categories":["hobby"],"content":"\r12.1 图形化客户端 GitX (L) (OSX, 开源软件) Tower (OSX) Source Tree (OSX, 免费) GitHub for Mac (OSX, 免费) GitBox (OSX, App Store) ","date":"2024-03-01","objectID":"/hello-git/:12:1","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#图形化客户端"},{"categories":["hobby"],"content":"\r12.2 指南和手册 Git 社区参考书 专业 Git 像 git 那样思考 图解 Git ","date":"2024-03-01","objectID":"/hello-git/:12:2","series":["blog"],"tags":["git"],"title":"Hello Git","uri":"/hello-git/#指南和手册"},{"categories":["hobby"],"content":"几分钟内学会创建 Hugo 网站。","date":"2024-02-17","objectID":"/hello-hugo/","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/"},{"categories":["hobby"],"content":"几分钟内学会创建 Hugo 网站入门教程。 ","date":"2024-02-17","objectID":"/hello-hugo/:0:0","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#"},{"categories":["hobby"],"content":"\r1 前提条件在开始此教程之前，你必须： 安装 Hugo（扩展版，v0.112.0 或更高版本） 安装 Git 你还必须能够熟练地使用命令行。 ","date":"2024-02-17","objectID":"/hello-hugo/:1:0","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#前提条件"},{"categories":["hobby"],"content":"\r2 创建网站","date":"2024-02-17","objectID":"/hello-hugo/:2:0","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#创建网站"},{"categories":["hobby"],"content":"\r2.1 命令 如果您是 Windows 用户： 请勿使用命令提示符 请勿使用 Windows PowerShell 从 PowerShell 或 Linux 终端（例如 WSL 或 Git Bash）运行这些命令 PowerShell 和 Windows PowerShell 是不同的应用程序。 验证您是否已安装 Hugo v0.112.0 或更高版本。 hugo version 运行这些命令创建带有 Ananke 主题的 Hugo 网站。下一部分提供了每条命令的解释。 hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \"theme = 'ananke'\" \u003e\u003e hugo.toml hugo server 在终端显示的 URL 中查看您的网站。按 Ctrl + C 停止 Hugo 的开发服务器。 ","date":"2024-02-17","objectID":"/hello-hugo/:2:1","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#命令"},{"categories":["hobby"],"content":"\r2.2 命令说明在 quickstart 目录中为您的项目创建目录结构。 hugo new site quickstart 将当前目录更改为项目的根目录。 cd quickstart 在当前目录中初始化一个空 Git 存储库。 git init 将 Ananke 主题克隆到 themes 目录中，将其作为 Git 子模块添加到您的项目中。 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 在网站配置文件中添加一行，指示当前主题。 echo \"theme = 'ananke'\" \u003e\u003e hugo.toml 启动 Hugo 的开发服务器以查看网站。 echo \"theme = 'ananke'\" \u003e\u003e hugo.toml 按 Ctrl + C 停止 Hugo 的开发服务器。 ","date":"2024-02-17","objectID":"/hello-hugo/:2:2","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#命令说明"},{"categories":["hobby"],"content":"\r3 添加内容向您的网站添加新页面。 hugo new content posts/my-first-post.md Hugo 在 content/posts 目录中创建了该文件。使用您的编辑器打开该文件。 +++ title = 'My First Post' date = 2024-01-14T07:07:07+01:00 draft = true +++ 请注意，front matter 中的 draft 值为 true。默认情况下，在构建网站时，Hugo 不会发布草稿内容。详细了解草稿、未来和已过期的内容。 在帖子的正文中添加一些 Markdown，但不要更改 draft 值。 +++ title = 'My First Post' date = 2024-01-14T07:07:07+01:00 draft = true +++ ## Introduction This is **bold** text, and this is *emphasized* text. Visit the [Hugo](https://gohugo.io) website! 保存文件，然后启动 Hugo 的开发服务器以查看网站。您可以运行以下命令之一来包括草稿内容。 hugo server --buildDrafts hugo server -D 在终端显示的 URL 中查看您的网站。在您继续添加和更改内容时，让开发服务器保持运行。 当对您的新内容满意时，将 front matter draft 参数设置为 false。 Hugo 的渲染引擎符合 Markdown 的 CommonMark 规范。CommonMark 组织提供了一个有用的实时测试工具。 ","date":"2024-02-17","objectID":"/hello-hugo/:3:0","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#添加内容"},{"categories":["hobby"],"content":"\r4 配置网站使用您的编辑器，在项目的根目录中打开网站配置文件 (hugo.toml)。 baseURL = 'https://example.org/' languageCode = 'en-us' title = 'My New Hugo Site' theme = 'ananke' 进行以下更改： 设置站点的 baseURL。此值必须以协议开头并以斜杠结尾，如上所示。 将 languageCode 设置为您的语言和地区（如zh-cn）。 设置生产站点的标题。 启动 Hugo 的开发服务器以查看您的更改，请记住包括草稿内容。 hugo server -D 大多数主题作者都会提供示例配置。请务必访问您主题的存储库或文档网站，以了解详细信息。 Ananke 主题的作者 The New Dynamic 提供有关配置和使用的文档。他们还提供了一个演示网站。 ","date":"2024-02-17","objectID":"/hello-hugo/:4:0","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#配置网站"},{"categories":["hobby"],"content":"\r5 发布网站在此步骤中，您将发布您的网站，但您不会部署它。 当您发布您的网站时，Hugo 会在您项目的根目录中的 public 目录中创建整个静态站点。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等。 当您发布您的网站时，您通常不希望包含草稿、未来或过期的内容。命令很简单。 hugo 要了解如何部署您的网站，请参阅托管和部署部分。 ","date":"2024-02-17","objectID":"/hello-hugo/:5:0","series":["blog"],"tags":["hugo"],"title":"Hello Hugo","uri":"/hello-hugo/#发布网站"},{"categories":null,"content":"\r免费建站 - 基本概念\r基于 Hugo + Github + CloudFlare\r阅读全文\r","date":"2024-02-16","objectID":"/showcase/:0:0","series":null,"tags":null,"title":"作品","uri":"/showcase/#"},{"categories":null,"content":"  DoIt 是一个由 HEIGE-PCloud 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LoveIt 主题， LeaveIt 主题 和 KeepIt 主题。 ","date":"2019-08-02","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#"},{"categories":null,"content":"\r1 特性","date":"2019-08-02","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#特性"},{"categories":null,"content":"\r1.1 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 百度统计  支持 Umami Analytics  支持 Plausible Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN ","date":"2019-08-02","objectID":"/about/:1:1","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#性能和-seo"},{"categories":null,"content":"\r1.2 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 ","date":"2019-08-02","objectID":"/about/:1:2","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#外观和布局"},{"categories":null,"content":"\r1.3 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Waline 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统  支持 Twikoo 评论系统  支持 Vssue 评论系统  支持 Remark42 评论系统  支持 giscus 评论系统  支持 Artalk 评论系统 ","date":"2019-08-02","objectID":"/about/:1:3","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#社交和评论系统"},{"categories":null,"content":"\r1.4 扩展功能  支持基于 algolia 或 Fuse.js 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2019-08-02","objectID":"/about/:1:4","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#扩展功能"},{"categories":null,"content":"\r2 许可协议DoIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 DoIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete.js algoliasearch Fuse.js object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine Waline Twikoo Vssue cookieconsent Remark42 ","date":"2019-08-02","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#许可协议"}]